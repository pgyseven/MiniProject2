<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miniproj.mappers.rboardmapper">

	<!-- 게시판의 모든 게시글을 번호 내림차순 정렬하여 가져오는 쿼리문(최신글부터 보여지도록 내림차순한다.) -->
   <select id="getAllHBoard" resultType="com.miniproj.model.HBoardVO">
      SELECT * FROM hboard where boardType = 'rboard' order by boardNo desc limit #{startRowIndex}, #{viewPostCntPerPage}
   </select>

	
	<!-- 새로운 게시글(댓글형 게시판)을 저장하는 쿼리문 -->
	<insert id="saveNewBoard">
		insert into hboard(title, content, writer, boardType) values(#{title}, #{content}, #{writer}, 'rboard')
	</insert>
	
	
	<!-- 저장된 글번호를 가져오는 쿼리문   -->
	<select id="getMaxNo" resultType="int">
		select max(boardNo) from  hboard where boardType = 'hboard'
	</select>
	
	
	<!-- 업로드된 첨부파일을 저장하는 쿼리문  -->
	<insert id="saveUpFile">
		insert into boardupfiles(newFileName, originFileName, thumbFileName, ext, size, boardNo, base64Img)
		values(#{newFileName}, #{originalFileName}, #{thumbFileName}, #{ext}, #{size}, #{boardNo}, #{base64Img})
	</insert>
	
	
	<!-- 게시글의 상세정보를 담기 위한 resultmap 설정 -->
	<resultMap type="com.miniproj.model.BoardDetailInfo" id="boardDetailInfoMap">
		<result column="boardNo" property="boardNo" javaType="int" />
		<result column="title" property="title" javaType="String" />
		<result column="content" property="content" javaType="String" />
		<result column="writer" property="writer" javaType="String" />
		<result column="postDate" property="postDate" javaType="java.sql.Timestamp" />
		<result column="readCount" property="readCount" javaType="int" />
		<result column="isDelete" property="isDelete" javaType="String" />
		
		<result column="userName" property="userName" javaType="String" />
		<result column="email" property="email" javaType="String" />
	</resultMap>
	
	<!--  게시글의 상세정보를 담는 조인 문 -->
	<select id="selectBoardDetailInfoByBoardNo" resultMap="boardDetailInfoMap">
		select h.boardNo, h.title, h.content, h.writer, h.postDate, h.readCount, h.isDelete, m.userName, m.email
		from hboard h inner join member m
		on h.writer = m.userId
		where h.boardNo = #{boardNo} and boardType = 'rboard'
	</select>
	
	<!-- boardNo번의 글을 수정하는 쿼리문 -->
	<update id="updateBoardByBoardNo">
		UPDATE hboard SET title = #{title}, content = #{content} WHERE boardNo = #{boardNo}
	</update>
	
	<!-- 게시글의 첨부파일을 PK로 삭제하는 쿼리문 -->
	<delete id="deleteBoardUpFileByPK">
		DELETE FROM boardupfiles WHERE boardUpFileNo = #{boardUpFileNo}
	</delete>
	
	<!-- 인기글 5개 가져오기 -->
	<select id="selectPopBoards" resultType="com.miniproj.model.HBoardVO">
		SELECT boardNo, title, postDate FROM hboard WHERE isDelete='N' AND boardType = 'hboard' ORDER BY readCount DESC, boardNo DESC limit 5
	</select>
	
	<!-- 전체 데이터 갯수 가져오기 -->
	<select id="selectTotalCount" resultType="int">
		SELECT COUNT(*) FROM hboard WHERE boardType = 'rboard'
	</select>
	
	<!-- 검색어가 있을 경우의 데이터 갯수 가져오기 -->
	<select id="selectTotalCountWithSearchCriteria" resultType="int">
		SELECT COUNT(*) FROM hboard
		<choose>
			<when test="searchType == 'title'">
				WHERE title LIKE #{searchWord}
			</when>
			<when test="searchType == 'writer'">
				WHERE writer LIKE #{searchWord}
			</when>
			<when test="searchType == 'content'">
				WHERE content LIKE #{searchWord}
			</when>
		</choose>
		AND boardType = rboard
	</select>
	
	<!-- 검색어가 있을 경우의 페이징 처리 후 데이터 가져오기 -->
	<select id="getSeasrchBoardWithPaging" resultType="com.miniproj.model.HBoardVO">
		SELECT * FROM hboard
		<choose>
			<when test="searchType == 'title'">
				WHERE title LIKE #{searchWord}
			</when>
			<when test="searchType == 'writer'">
				WHERE writer LIKE #{searchWord}
			</when>
			<when test="searchType == 'content'">
				WHERE content LIKE #{searchWord}
			</when>
		</choose>
			AND boardType = 'rboard'
			
			ORDER BY boardNo DESC, refOrder ASC LIMIT #{startRowIndex}, #{viewPostCntPerPage}
	</select>
	
</mapper> 