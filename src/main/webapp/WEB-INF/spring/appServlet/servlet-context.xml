<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model annotation방식으로 
		설정 하겠다.의미 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory 정적인 파일(css, 
		js, image등을) /resources 폴더 아래에 위치하게 하고 /resources/** 로 매핑 해 놓음 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- 아래의 패키지를 조사하여 필요한 컨트롤러 객체를 컨테이너에 적재 -->
	<context:component-scan
		base-package="com.miniproj.controller" />

	<!-- 수신된 Multipart의 데이터를 순서대로 재조립, 파일 업로드 제한 : 10MB -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"></beans:property>
	</beans:bean>

	<!-- 인터셉터(interceptor) 설정 : 필요한 인터셉터 객체를 만들고 관리하도록 한다. -->
	<beans:bean id="sampleInterceptor"
		class="com.miniproj.interceptor.interceptorExam">
	</beans:bean>

	<beans:bean id="loginInterceptor"
		class="com.miniproj.interceptor.LoginInterceptor">
	</beans:bean>

	<beans:bean id="authInterceptor"
		class="com.miniproj.interceptor.AuthInterceptor">
		
	</beans:bean>

	<!-- 인터셉터가 동작하는 매핑 설정 -->
	<interceptors>
		<interceptor> <!-- "/sampleInterceptor" uri로 매핑이 들어오면 "sampleInterceptor" 객체가 동작하도록 한다. -->
			<mapping path="/sampleInterceptor" />
			<beans:ref bean="sampleInterceptor" /> <!-- 객체를 참조해주는 것 -->
		</interceptor>
		
		<interceptor>
			<mapping path="/member/login" />
			<mapping path="/member/loginPOST" />
			<beans:ref bean="loginInterceptor" />
		</interceptor>

		<!-- 로그인 인증이 필요한 페이지 : 글작성, 글수정, 글삭제, 댓글작성/수정/삭제, 관리자 페이지의 모든 기능 -->
		<interceptor>
			<mapping path="/hboard/saveBoard" /> <!-- 글작성 -->
			<mapping path="/hboard/modifyBoard" /> <!-- 글&댓글 수정 -->
			<mapping path="/hboard/removeBoard" /> <!-- 글&댓글 삭제 -->
			<mapping path="/hboard/showReplyForm" /> <!-- 댓글작성 -->
			
			<mapping path="/rboard/showSaveBoardForm" /> <!-- 댓글 게시판의 글 작성 페이지 -->
			<mapping path="/rboard/modifyBoard" /> <!-- 댓글 게시판의 글 수정 페이지 -->

			<beans:ref bean="authInterceptor" />
		</interceptor>


		<interceptor>
			<mapping path="/member/login" />
			<!-- 인터셉터는 get과 post를 구분하지 못한다. -->
			<beans:ref bean="loginInterceptor" />
		</interceptor>
	</interceptors>

</beans:beans>
