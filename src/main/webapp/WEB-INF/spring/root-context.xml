<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring 
		http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop 
		 http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
		<!--위에서 트랜잭션도 포함니깐 이것과 아래것 먼저  aop 배우기도 전에한거다 http://www.springframework.org/schema/aop 
		 http://www.springframework.org/schema/aop/spring-aop-4.3.xsd -->
		
		<!-- AspectJ 라이브러리를 이용해 Proxy 객체를 생성하도록 설정(aop관련 설정) -->
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
		
		<!-- transaction 처리를 annotation으로 진행하겠다. -->
	<tx:annotation-driven/>
	
	
	
	<!-- classpath 에서 dbconfig.properties 파일의 내용을 읽어와 속성으로 세팅 / mysql 시작전 bean 시작전에 classpath 스프링 우리 소스코드와 함께 같이 컴파일 되는 경로임  -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>
	
	
	
	<!-- mysql 데이터베이스 연결 	-->	
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="com.mysql.cj.jdbc.Driver">
		</property>
		<property name="url"
			value="${db.url}">
		</property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>
	 
	
	<!--  log4jdbc 이용시 
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		
		<property name="url"
			value="jdbc:log4jdbc:mysql://127.0.0.1:3306/webshjin?useSSL=false">
		</property>
		
		<property name="username" value="root"></property>
		<property name="password" value="1234"></property>
	</bean>
	-->
	
	<!--  Mybatis 객체 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>

		<property name="configLocation"
			value="classpath:/mybatis-config.xml">
		</property>

		<property name="mapperLocations"
			value="classpath:mappers/**/*Mapper.xml">
		</property>
	</bean>
	
	<!--  SqlSessionTemplate 객체 : (jdbc에서의 Connection, PreparedStatement, 쿼리문 실행, 결과 가져오기, close 등의 작업을 수행해주는 객체) -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!--  아래의 패키지를 조사(scan)하여 필요한 객체를 만들고, 스프링 컨테이너에 의해 관리되도록 한다. -->
	<context:component-scan base-package="com.miniproj.service.hboard"></context:component-scan>
	<context:component-scan base-package="com.miniproj.persistence"></context:component-scan>
	<context:component-scan base-package="com.miniproj.util"></context:component-scan>
	<context:component-scan base-package="com.miniproj.service.member"></context:component-scan>
	<context:component-scan
		base-package="com.miniproj.reply"></context:component-scan>
	<context:component-scan base-package="com.miniproj.aop"></context:component-scan>
	<context:component-scan base-package="com.miniproj.message"></context:component-scan>
	


</beans>
